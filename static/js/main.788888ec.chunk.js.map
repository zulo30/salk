{"version":3,"sources":["components/Map.js","components/Chart.js","components/App.js","reportWebVitals.js","index.js"],"names":["style","height","Map","sceneSetup","width","mount","clientWidth","clientHeight","bgcolor","THREE","scene","background","camera","position","z","controls","OrbitControls","renderer","manager","setSize","appendChild","domElement","loadTheModel","OBJLoader","load","object","add","map","getObjectByName","set","rotation","x","model","xhr","loadingPercentage","Math","ceil","loaded","total","console","log","props","onProgress","error","loadTexture","addLights","lights","startAnimationLoop","render","requestID","window","requestAnimationFrame","handleWindowResize","aspect","updateProjectionMatrix","this","addEventListener","removeEventListener","cancelAnimationFrame","dispose","ref","Component","data","fecha","casos","Chart","handleResize","e","setState","windowWidth","innerWidth","windowHeight","innerHeight","state","AreaChart","margin","top","right","left","bottom","XAxis","dataKey","YAxis","Tooltip","Legend","Area","type","stroke","fill","PureComponent","demoUrl","App","isMounted","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.788888ec.chunk.js","sourcesContent":["import { Component } from \"react\";\nimport * as THREE from 'three';\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { OBJLoader } from \"three/examples/jsm/loaders/OBJLoader\";\n\nconst style = {\n    height: 500 // we can control scene size by setting container dimensions\n};\n\n\nclass Map extends Component {\n    componentDidMount() {\n        this.sceneSetup();\n        this.addLights();\n        this.loadTheModel();\n        this.startAnimationLoop();\n        window.addEventListener('resize', this.handleWindowResize);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('resize', this.handleWindowResize);\n        window.cancelAnimationFrame(this.requestID);\n        this.controls.dispose();\n    }\n\n    // Standard scene setup in Three.js. Check \"Creating a scene\" manual for more information\n    // https://threejs.org/docs/#manual/en/introduction/Creating-a-scene\n    sceneSetup = () => {\n        // get container dimensions and use them for scene sizing\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n        const bgcolor = new THREE.Color(0x282c34);\n\n\n        this.scene = new THREE.Scene();\n        this.scene.background = bgcolor;\n        this.camera = new THREE.PerspectiveCamera(\n            75, // fov = field of view\n            width / height, // aspect ratio\n            0.1, // near plane\n            10000 // far plane\n        );\n        this.camera.position.z = 1000; // is used here to set some distance from a cube that is located at z = 0\n        // OrbitControls allow a camera to orbit around the object\n        // https://threejs.org/docs/#examples/controls/OrbitControls\n        this.controls = new OrbitControls(this.camera, this.mount);\n        this.renderer = new THREE.WebGLRenderer();\n        this.manager = new THREE.LoadingManager();\n        this.renderer.setSize(width, height);\n        this.mount.appendChild(this.renderer.domElement);\n        // mount using React ref\n    };\n\n    // Code below is taken from Three.js OBJ Loader example\n    // https://threejs.org/docs/#examples/en/loaders/OBJLoader\n    loadTheModel = () => {\n        // instantiate a loader\n        const loader = new OBJLoader();\n\n        // load a resource\n        loader.load(\n            // resource URL relative to the /public/index.html of the app\n            'assets/objs/map.obj',\n            // called when resource is loaded\n            (object) => {\n\n                this.scene.add(object);\n\n                // get the newly added object by name specified in the OBJ model (that is Elephant_4 in my case)\n                // you can always set console.log(this.scene) and check its children to know the name of a model\n                const map = this.scene.getObjectByName(\"map\");\n                // change some custom props of the element: placement, color, rotation, anything that should be\n                // done once the model was loaded and ready for display\n                map.position.set(0, 0, 0);\n                map.rotation.x = 1.57;\n\n\n                // // make this element available inside of the whole component to do any animation later\n                this.model = map;\n            },\n            // called when loading is in progresses\n            (xhr) => {\n\n                const loadingPercentage = Math.ceil(xhr.loaded / xhr.total * 100);\n                console.log((loadingPercentage) + '% loaded');\n\n                // update parent react component to display loading percentage\n                this.props.onProgress(loadingPercentage);\n            },\n            // called when loading has errors\n            (error) => {\n\n                console.log('An error happened:' + error);\n\n            }\n        );\n    };\n\n    loadTexture = () => {\n\n    }\n\n    // adding some lights to the scene\n    addLights = () => {\n        const lights = [];\n\n        // set color and intensity of lights\n        lights[0] = new THREE.PointLight(0xffffff, 1, 0);\n        lights[1] = new THREE.PointLight(0xffffff, 1, 0);\n        lights[2] = new THREE.PointLight(0xffffff, 1, 0);\n\n        // place some lights around the scene for best looks and feel\n        lights[0].position.set(0, 2000, 0);\n        lights[1].position.set(1000, 2000, 1000);\n        lights[2].position.set(- 1000, - 2000, - 1000);\n\n        this.scene.add(lights[0]);\n        this.scene.add(lights[1]);\n        this.scene.add(lights[2]);\n    };\n\n    startAnimationLoop = () => {\n        //slowly rotate an object\n        if (this.model) this.model.rotation.z += 0.002;\n\n        this.renderer.render(this.scene, this.camera);\n\n        // The window.requestAnimationFrame() method tells the browser that you wish to perform\n        // an animation and requests that the browser call a specified function\n        // to update an animation before the next repaint\n        this.requestID = window.requestAnimationFrame(this.startAnimationLoop);\n    };\n\n    handleWindowResize = () => {\n        const width = this.mount.clientWidth;\n        const height = this.mount.clientHeight;\n\n        this.renderer.setSize(width, height);\n        this.camera.aspect = width / height;\n\n        // Note that after making changes to most of camera properties you have to call\n        // .updateProjectionMatrix for the changes to take effect.\n        this.camera.updateProjectionMatrix();\n    };\n\n    render() {\n        return <div style={style} ref={ref => (this.mount = ref)} />;\n    }\n}\n\nexport default Map;","import React, { PureComponent } from 'react';\nimport {\n    AreaChart,\n    Area,\n    XAxis,\n    YAxis,\n    Tooltip,\n    Legend\n} from \"recharts\";\n\n\nconst data = [\n    { fecha: 'Jan.2020', casos: 0 },\n    { fecha: 'Feb.2020', casos: 0 },\n    { fecha: 'Mar.2020', casos: 96 },\n    { fecha: 'Apr.2020', casos: 300 },\n    { fecha: 'May.2020', casos: 1548 },\n    { fecha: 'Jun.2020', casos: 4106 },\n    { fecha: 'Jul.2020', casos: 9965 },\n    { fecha: 'Aug.2020', casos: 8020 },\n    { fecha: 'Sep.2020', casos: 5637 },\n    { fecha: 'Oct.2020', casos: 10029 },\n    { fecha: 'Nov.2020', casos: 8430 },\n    { fecha: 'Dec.2020', casos: 16314 },\n    { fecha: 'Jan.2021', casos: 9173 },\n    { fecha: 'Feb.2021', casos: 3567 },\n    { fecha: 'Mar.2021', casos: 3751 },\n    { fecha: 'Apr.2021', casos: 0 }\n];\n\nclass Chart extends PureComponent {\n\n    static demoUrl = 'https://codesandbox.io/s/simple-line-chart-kec3v';\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight\n        };\n    }\n\n    handleResize = (e) => {\n        this.setState({\n            windowWidth: window.innerWidth,\n            windowHeight: window.innerHeight\n        });\n    };\n\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n    componentWillUnmount() {\n        window.addEventListener(\"resize\", this.handleResize);\n    }\n\n\n    render() {\n        const { windowWidth, windowHeight } = this.state;\n        return (\n            <AreaChart\n                width={windowWidth * 0.9}\n                height={windowHeight * 0.22}\n                data={data}\n                margin={{\n                    top: 5,\n                    right: 30,\n                    left: 20,\n                    bottom: 5\n                }}>\n                <XAxis dataKey=\"fecha\" />\n                <YAxis />\n                <Tooltip />\n                <Legend />\n                <Area type=\"monotone\" dataKey=\"casos\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n            </AreaChart>\n        );\n    }\n}\n\nexport default Chart;","import { Component } from \"react\";\n\nimport '../assets/css/App.css';\nimport Map from './Map';\nimport Chart from \"./Chart\";\n\nclass App extends Component {\n  state = { isMounted: true };\n\n  render() {\n    const { isMounted = true, loadingPercentage = 0 } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"App-chart\"><Chart /></div>\n          <div className=\"App-main\">\n            <div className=\"App-main-section\"><h1>Salk project</h1></div>\n            <div className=\"App-main-section\">\n              <button onClick={() => this.setState(state => ({ isMounted: !state.isMounted }))}>\n                {isMounted ? \"Unmount\" : \"Mount\"}\n              </button>\n              {isMounted && <Map onProgress={loadingPercentage => this.setState({ loadingPercentage })} />}\n              {isMounted && loadingPercentage === 100 && <div>Scroll to zoom, drag to rotate</div>}\n              {isMounted && loadingPercentage !== 100 && <div>Loading Model: {loadingPercentage}%</div>}\n            </div>\n          </div>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\n"],"sourceRoot":""}